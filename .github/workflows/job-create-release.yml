name: Create Release (job)

on:
  workflow_call:
    inputs:
      prerelease:
        required: false
        type: string
        default: ''
      release_as:
        # https://github.com/conventional-changelog/standard-version#release-as-a-target-type-imperatively-npm-version-like
        required: true
        type: string
        description: auto, major, minor, or patch
      ecr_repository:
        required: true
        type: string
    secrets:
      ECR_AWS_ACCESS_KEY_ID:
        required: true
      ECR_AWS_SECRET_ACCESS_KEY:
        required: true

env:
  ECR_REPOSITORY: ${{ inputs.ecr_repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_xapi_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: kidsloop
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    outputs:
      VERSION_TAG: ${{ steps.get-versions.outputs.VERSION_TAG }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          registry-url: https://npm.pkg.github.com/

      - name: Find node_modules cache
        id: cache-node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Set up git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      - name: Generate release version
        run: npx standard-version --skip.changelog
          ${{ inputs.prerelease != '' && format('--prerelease {0}', inputs.prerelease) || '' }}
          ${{ inputs.release_as != 'auto' && format('--release-as {0}', inputs.release_as) || '' }}

      - name: npm build
        run: npm run build

      - name: Get versions
        id: get-versions
        run: |
          version=$(git describe --tags --abbrev=0)
          previous_version=$(git describe --tags --abbrev=0 $version^)
          echo ::set-output name=version::$version
          echo ::set-output name=previous-version::$previous_version

      - name: Docker build
        run: |
          npm prune --production
          docker build -t $ECR_REPOSITORY .

      - name: Container startup check
        run: |
          # Only one record sender is required for the service to start successfully.
          # The following enables the postgres record sender.
          # We can get fancier later if we want, but this is a good start.
          docker run \
            --add-host host.docker.internal:host-gateway \
            -d \
            --name=check-startup \
            -e XAPI_DATABASE_URL=postgres://postgres:kidsloop@host.docker.internal:5432/test_xapi_db \
            $ECR_REPOSITORY && sleep 8 && docker logs check-startup && docker top check-startup

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION_TAG: ${{ steps.get-versions.outputs.version }}
        run: |
          export BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}')
          export COMMIT_TAG=${GITHUB_SHA::7}
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:alpha
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$COMMIT_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:alpha
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-$COMMIT_TAG

      - name: Commit changes
        env:
          VERSION_TAG: ${{ steps.get-versions.outputs.version }}
        run: |
          git push origin $VERSION_TAG
          git push origin main

      - name: Generate changelog
        id: changelog
        uses: cabauman/changelogger-action@main

      - name: Upsert GitHub release
        uses: actions/github-script@v6.1.0
        env:
          PREVIOUS_VERSION: ${{ steps.get-versions.outputs.previous-version }}
          RELEASE_NAME: ${{ steps.get-versions.outputs.version }}
          PRERELEASE: ${{ inputs.prerelease != '' }}
          BODY: ${{ steps.changelog.outputs.changelog }}
        with:
          script: |
            const { PREVIOUS_VERSION, RELEASE_NAME, PRERELEASE, BODY } = process.env
            const { owner, repo } = context.repo
            const { data } = await github.rest.repos.listReleases({ owner, repo, per_page: 1 })
            const release = data.length > 0 ? data[0] : undefined
            let updateExisting = false
            if (release?.prerelease === true) {
              const regex = /^(v[0-9]+\.[0-9]+\.[0-9]+)-.*$/
              const match = regex.exec(PREVIOUS_VERSION)
              if (match) {
                const previousBaseVersion = match[1]
                updateExisting = release.tag_name.startsWith(previousBaseVersion)
              }
            }
            if (updateExisting) {
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: release.id,
                prerelease: PRERELEASE === 'true',
                name: RELEASE_NAME,
                tag_name: RELEASE_NAME,
                body: BODY,
              })
            } else {
              await github.rest.repos.createRelease({
                owner,
                repo,
                prerelease: PRERELEASE === 'true',
                name: RELEASE_NAME,
                tag_name: RELEASE_NAME,
                body: BODY,
              })
            }
